{"version":3,"sources":["components/button.tsx","utils/noseDetector.tsx","utils/emojiDrawer.tsx","pages/camera.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/nose.svg"],"names":["buttonStyle","active","color","backgroundColor","boxShadow","borderRadius","padding","margin","disabled","Button","props","react_default","a","createElement","style","Object","objectSpread","onClick","label","defaultProps","detector","_ref","asyncToGenerator","regenerator_default","mark","_callee2","net","detectPose","wrap","_context2","prev","next","posenet","sent","_ref2","_callee","videoRef","poses","_context","estimateSinglePose","abrupt","score","keypoints","filter","point","part","t0","console","log","stop","_x","apply","this","arguments","drawEmoji","ctx","x","y","emoji","length","undefined","nose","img","Image","src","onload","drawImage","size","getVideoDimentions","video","videoRatio","videoWidth","videoHeight","elementRatio","window","innerWidth","innerHeight","width","height","Camera","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","canvasRef","noseDetector","activeStream","loadCamera","cameras","detectCameras","setState","startStreaming","deviceId","devices","navigator","mediaDevices","enumerateDevices","device","kind","_callee3","stream","_args3","_context3","getTracks","forEach","track","getUserMedia","audio","exact","current","srcObject","activeCamera","alert","detectPoseInFrame","_callee4","_context4","updateCanvas","requestAnimationFrame","_getVideoDimentions","canvas","getContext","clearRect","save","scale","translate","map","restore","beginPath","position","fill","changeCameraSource","_callee5","_this$state","_context5","state","camera","index","nextCameraId","React","createRef","MediaStream","Promise","all","noseDetection","addEventListener","_this2","bottom","left","zIndex","components_button","autoPlay","muted","className","playsInline","ref","transform","visibility","top","Component","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.5855baaf.chunk.js","sourcesContent":["import React from \"react\";\n\nconst buttonStyle = {\n  active: {\n    color: \"#333\",\n    backgroundColor: \"azure\",\n    boxShadow: \"0 0 20px 1px black\",\n    borderRadius: \"30px\",\n    padding: \"5px 10px\",\n    margin: \"15px\"\n  },\n  disabled: {\n    color: \"#AAA\",\n    backgroundColor: \"#CCC\"\n  }\n};\n\ninterface ButtonProps {\n  label: String;\n  onClick(): void;\n  disabled?: boolean;\n}\n\nconst Button: React.SFC<ButtonProps> = props => (\n  <button\n    style={{\n      ...buttonStyle.active,\n      ...(props.disabled ? buttonStyle.disabled : {})\n    }}\n    onClick={props.onClick}\n    disabled={props.disabled}\n  >\n    {props.label}\n  </button>\n);\n\nButton.defaultProps = {\n  disabled: false\n};\n\nexport default Button;\n","import React from \"react\";\nimport * as posenet from \"@tensorflow-models/posenet\";\n\nconst detector = async () => {\n  const net = await posenet.load(0.75);\n\n  const detectPose = async (videoRef: HTMLVideoElement) => {\n    try {\n      const poses = await net.estimateSinglePose(videoRef, 0.5, true);\n\n      // if (isNaN(poses.score)) console.log(\"NaN pose detected!\");\n\n      // Avoid 0 and NaN scores\n      return (\n        (poses.score > 0 &&\n          poses.keypoints.filter(point => point.part === \"nose\")) ||\n        []\n      );\n    } catch (e) {\n      console.log(\"EstimateSinglePose() failed!\");\n    }\n  };\n\n  return {\n    detectPose\n  };\n};\n\nexport default detector;\n","import React from \"react\";\nimport nose from \"../assets/nose.svg\";\n\nconst drawEmoji = (ctx: any, x: number, y: number, emoji: string = nose) => {\n  const size = 50;\n  const img = new Image();\n  switch (emoji) {\n    case \"nose\":\n    default: {\n      img.src = nose;\n    }\n  }\n  img.onload = function() {\n    ctx.drawImage(img, x - size / 2, y - size / 2, size, size);\n  };\n};\n\nexport default drawEmoji;\n\nexport const getVideoDimentions = (video: HTMLVideoElement) => {\n  const videoRatio = video.videoWidth / video.videoHeight;\n  const elementRatio = window.innerWidth / window.innerHeight;\n  return {\n    width:\n      elementRatio > videoRatio\n        ? window.innerHeight * videoRatio\n        : window.innerWidth,\n    height:\n      elementRatio <= videoRatio\n        ? window.innerWidth / videoRatio\n        : window.innerHeight\n  };\n};\n","import React, { Component } from \"react\";\nimport Button from \"../components/button\";\nimport noseDetection from \"../utils/noseDetector\";\nimport drawEmoji, { getVideoDimentions } from \"../utils/emojiDrawer\";\n\ninterface CameraProps {}\ninterface CameraState {\n  cameras: Array<MediaDeviceInfo>;\n  activeCamera: string;\n}\n\nclass Camera extends React.Component<CameraProps, CameraState> {\n  private videoRef: React.RefObject<HTMLVideoElement>;\n  private canvasRef: React.RefObject<HTMLCanvasElement>;\n  private noseDetector: any;\n  private activeStream: MediaStream;\n\n  constructor(props: CameraProps) {\n    super(props);\n    this.videoRef = React.createRef();\n    this.canvasRef = React.createRef();\n    this.activeStream = new MediaStream();\n    this.state = {\n      cameras: [],\n      activeCamera: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const [video, detector] = await Promise.all([\n        this.loadCamera(),\n        noseDetection()\n      ]);\n      this.noseDetector = detector;\n\n      this.detectPoseInFrame();\n    } catch (e) {\n      console.log(\"Something went wrong\");\n    }\n\n    window.addEventListener(\"resize\", () => this.updateCanvas());\n  }\n\n  loadCamera = async () => {\n    const cameras = await this.detectCameras();\n    if (cameras && cameras.length > 0) {\n      this.setState({ cameras });\n      return await this.startStreaming(cameras[0].deviceId);\n    }\n  };\n\n  detectCameras = async () => {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n      console.log(\"enumerateDevices() is not supported.\");\n      return;\n    }\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    return devices.filter(device => device.kind === \"videoinput\");\n  };\n\n  startStreaming = async (deviceId: string = \"\") => {\n    try {\n      this.activeStream.getTracks().forEach(track => track.stop());\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: {\n          deviceId: { exact: deviceId }\n        }\n      });\n\n      if (this.videoRef.current) {\n        this.videoRef.current.srcObject = stream;\n        this.activeStream = stream;\n      }\n\n      this.setState({\n        activeCamera: deviceId\n      });\n\n      return this.videoRef.current;\n    } catch (e) {\n      alert(\"Could not load camera!\");\n    }\n  };\n\n  detectPoseInFrame = async () => {\n    try {\n      const poses = await this.noseDetector.detectPose(this.videoRef.current);\n      this.updateCanvas(poses);\n    } catch (e) {\n      console.log(\"Could not load poses\");\n    }\n\n    // Loop using requestAnimationFrame\n    requestAnimationFrame(this.detectPoseInFrame);\n  };\n\n  updateCanvas = (poses: any = []) => {\n    if (!this.videoRef.current || !this.canvasRef.current) return;\n\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n    const { height, width } = getVideoDimentions(this.videoRef.current);\n\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext(\"2d\"); // Returns context or null\n    if (!ctx) return;\n    canvas.width = width;\n    canvas.height = height;\n    this.videoRef.current.width = width;\n    this.videoRef.current.height = height;\n    ctx.clearRect(0, 0, width, height);\n    ctx.save();\n    ctx.scale(-1, 1);\n    ctx.translate(-width, 0);\n\n    ctx.drawImage(this.videoRef.current, 0, 0, width, height);\n\n    poses.map((point: any) => {\n      if (point.part === \"nose\") {\n        if (ctx) {\n          ctx.restore();\n          ctx.beginPath();\n          drawEmoji(ctx, point.position.x, point.position.y);\n          ctx.fill();\n        }\n      }\n    });\n  };\n\n  changeCameraSource = async () => {\n    const { cameras, activeCamera } = this.state;\n\n    cameras.forEach((camera, index) => {\n      if (camera.deviceId === activeCamera) {\n        const nextCameraId = cameras[(index + 1) % cameras.length].deviceId;\n        this.startStreaming(nextCameraId);\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.cameras.length > 1 && (\n          <div\n            style={{\n              position: \"absolute\",\n              bottom: 0,\n              left: 0,\n              width: \"100vw\",\n              zIndex: 1\n            }}\n          >\n            <Button label=\"Change camera\" onClick={this.changeCameraSource} />\n          </div>\n        )}\n        <video\n          autoPlay\n          width=\"100%\"\n          height=\"100%\"\n          muted={true}\n          className=\"video-player\"\n          playsInline\n          ref={this.videoRef}\n          style={{ transform: \"scaleX(-1)\", visibility: \"hidden\" }}\n        />\n        <canvas\n          ref={this.canvasRef}\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\"\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Camera;\n","import React, { Component } from \"react\";\nimport Camera from \"./pages/camera\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <section className=\"App-body\">\n          <Camera />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/nose.f668a93b.svg\";"],"sourceRoot":""}